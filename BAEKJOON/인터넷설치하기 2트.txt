//https://www.acmicpc.net/problem/1800 
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

using Graph = vector<vector<pair<int, int>>>;
int N = 0, P = 0, K = 0;
bool sol(const Graph& graph, int maxWeihgt) 
{
	priority_queue < pair<int, int>, vector<pair<int, int>>, less<pair<int, int>>> pq;
	vector<int>dist(N+1, 1000002);

	pq.push({ 0,1 });
	dist[1] = 0;
	while (!pq.empty())
	{
		int cur = pq.top().second;
		int curW = pq.top().first;
		pq.pop();
		if (dist[cur] < curW) continue;

		for (const auto& Node : graph[cur])
		{
			int next = Node.first;
			int nextW = curW+(Node.second>maxWeihgt);
			if (dist[next] > nextW)
			{
				dist[next] = nextW;
				pq.push({ nextW,next });
			}
		}
	}

	return K >= dist[N];


}

int main()
{
	 cin >> N >> P >> K;

	 int ret = -1;
	vector<vector<pair<int, int>>> v(N+1);
	int MaxValue = 0;
	for (int i = 0; i < P; ++i)
	{
		int a, b, c;
		cin >> a >> b >> c;
		v[a].push_back({ b,c });
		v[b].push_back({ a,c });
		MaxValue = max(MaxValue, c);
	}
	int left = 0, right = MaxValue;

	while (left <=right)
	{
		int mid = (left + right) >> 1;
		if (sol(v, mid)==true) //mid이상으로 됨
		{
			right = mid-1;
			ret = mid;

		}
		else {
			left = mid + 1;
		}
	}


	cout << ret;
}