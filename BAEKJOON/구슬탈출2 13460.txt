//https://www.acmicpc.net/problem/13460 
//문제명: 구슬 탈출 2
#include <iostream>
#include <queue>
using namespace std;
using Point = std::pair<int, int>;
//BFS로 찾아보자.
//Count를 기록해야함
//이동

//동서남북
enum Direction
{
    E = 0,
    W = 1,
    S = 2,
    North = 3
};
constexpr Point Directions[]{ {1,0}, {-1, 0},{0,1},{0,-1} };
int N, M;
char Board[10][10];

void _Move(Point& point, Direction dir)
{
    while (Board[point.second + Directions[dir].second][point.first + Directions[dir].first] != '#')
    {
        point.first += Directions[dir].first;
        point.second += Directions[dir].second;

        if (Board[point.second][point.first] == 'O')
            break;
    }


}
void Move(Point& red, Point& blue, Direction dir)
{
    bool redFirst = false;
    switch (dir)
    {
    case E:
        if (red.first > blue.first)
        {
            redFirst = true;
        }

        break;
    case W:
        if (red.first < blue.first)
        {
            redFirst = true;
        }

        break;
    case S:
        if (red.second > blue.second)
        {
            redFirst = true;;
        }

        break;
    case North:
        if (red.second < blue.second)
        {
            redFirst = true;;
        }

        break;
    default:
        break;
    }

    if (true == redFirst)
    {
        _Move(red, dir);
        _Move(blue, dir);
        if (red == blue && Board[red.second][red.first] != 'O')
        {
            blue.first -= Directions[dir].first;
            blue.second -= Directions[dir].second;
        }
    }
    else
    {
        _Move(blue, dir);
        _Move(red, dir);
        if (red == blue && Board[red.second][red.first] != 'O')
        {
            red.first -= Directions[dir].first;
            red.second -= Directions[dir].second;
        }
    }
}

//이미왔던경로는 무시

struct Data
{
    Point red{};
    Point blue{};
    //시도 횟수
    int cnt{};
};

int BFS(const Data& startData)
{
    int result = 11;

    std::queue<Data> q{};
    q.emplace(startData);
    bool visited[10][10][10][10]{};
    if ('O' == Board[startData.red.second][startData.red.first])
    {
        return 0;
    }

    visited[startData.red.first][startData.red.second][startData.blue.first][startData.blue.second] = true;

    while (!q.empty())
    {
        auto data = q.front();
        q.pop();

        if (data.cnt > 10)
        {
            continue;
        }

        for (int i = 0; i < 4; ++i)
        {
            Point captureRed = data.red;
            Point captureBlue = data.blue;

            Move(captureRed, captureBlue, static_cast<Direction>(i));
            if ('O' == Board[captureBlue.second][captureBlue.first])
            {
                continue;
            }

            if ('O' == Board[captureRed.second][captureRed.first])
            {
                result = std::min(data.cnt+1, result);
                continue;
            }

            if (visited[captureRed.first][captureRed.second][captureBlue.first][captureBlue.second])
            {
                continue;
            }
  
            q.push({ captureRed, captureBlue, data.cnt + 1 });
        }

    }

    return result > 10 ? -1 : result;
}

int main()
{
    cin >> N >> M;
    Data startData{};
    for (int i = 0; i < N; ++i)
    {
        for (int j = 0; j < M; ++j)
        {
            cin >> Board[i][j];
            if ('R' == Board[i][j])
            {
                startData.red.first = j;
                startData.red.second = i;
                Board[i][j] = '.';
            }

            if ('B' == Board[i][j])
            {
                startData.blue.first = j;
                startData.blue.second = i;
                Board[i][j] = '.';
            }
        }
    }

    cout << BFS(startData) << '\n';
}