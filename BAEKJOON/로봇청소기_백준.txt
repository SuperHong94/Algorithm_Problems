//https://www.acmicpc.net/problem/14503
//
#include <iostream>

using namespace std;
int N, M;

constexpr int dx[] = { 0, 1, 0, -1 };
constexpr int dy[] = { -1, 0, 1, 0 };

/*
//0 북
//1 동
//2 남
//3 서

*/
char MAP[50][50];

bool RangeOK(int r, int c)
{
	return r >= 0 && r < N&& c >= 0 && c < M;
}
bool second(int& dir, int& r, int& c)
{
	int nextDir = dir;
	for (int i = 0; i < 5; ++i) { // 자기자신위치로 돌아올때까지 
		nextDir--;
		if (nextDir == -1)nextDir = 3;
		int nextR = r + dy[nextDir], nextC = c + dx[nextDir];
		if (RangeOK(nextR, nextC) && MAP[nextR][nextC] == '0') {
			r = nextR;
			c = nextC;
			dir = nextDir;
			return true;
		}
	}
	//후진해야됨
	int backDir = dir + 1;
	if (backDir == 4)backDir = 0;
	backDir++;
	if (backDir == 4)backDir = 0;
	int backR = r + dy[backDir];
	int backC = c + dx[backDir];
	if (false == RangeOK(backR , backC)||MAP[backR][backC]=='1')
		return false;
	else {
		r = backR;
		c = backC;
		return true;
	}
}
int main()
{
	cin >> N >> M;
	int r = 0, c = 0, dir = 0; cin >> r >> c >> dir;

	for (int i = 0; i < N; ++i) {
		for (int j = 0; j < M; ++j)
			cin >> MAP[i][j];
	}


	int cnt = 0;
	while (true) {

		if (MAP[r][c] == '0') {
			MAP[r][c] = '2';
			cnt++;
			/*cout << endl;
			for (int i = 0; i < N; ++i) {
				for (int j = 0; j < M; ++j)
					cout<<MAP[i][j]<<' ';
				cout << endl;
			}*/
		}
		if (second(dir, r, c) == false)
			break;


	}

	cout << cnt;
}