// https://www.acmicpc.net/problem/4179
#include <iostream>
#include <queue>
#include <unordered_map>
using namespace std;

constexpr char WALL = '#';
constexpr char Fire = 'F';

int dirX[]{ 0,0,-1,1 };
int dirY[]{ -1,1,0,0 };

int R = 0, C = 0;

//불탄 위치 기록
int fireMap[1000][1000];

//방문했던 위치 기록
int chached[1000][1000];
constexpr int MAXVALUE = 1000 * 1000 * 1000;
bool checkRange(int x, int y)
{
	if (x < 0 || x >= C || y < 0 || y >= R)
		return false;

	return true;
}
bool CheckPossiblePath(int x, int y, int time)
{
	if (false == checkRange(x, y))
		return false;

	if (time >= fireMap[y][x])
		return false;

	//이미 예전에 방문했었으면 pass
	if (MAXVALUE != chached[y][x])
		return false;

	return true;
}

bool isEnd(int x, int y)
{
	if (x == 0 || y == 0 || x == (C - 1) || y == (R - 1))
		return true;

	return false;
}



struct Path
{
	Path()
	{
	}
	Path(int y, int x, int c) :pos(y, x), time(c)
	{

	}

	pair<int, int> pos{};

	int time = 0;

};

std::queue<Path> FireQ;
void FireAction(int time)
{
	while (!FireQ.empty())
	{
		auto node = FireQ.front();
		FireQ.pop();

		for (int i = 0; i < 4; ++i)
		{
			int newY = node.pos.first + dirY[i];
			int newX = node.pos.second + dirX[i];

			if (false == checkRange(newX, newY))
			{
				continue;
			}

			if (-1 == fireMap[newY][newX])
			{
				continue;
			}

			if (MAXVALUE != fireMap[newY][newX])
			{
				continue;
			}

			fireMap[newY][newX] = node.time + 1;
			FireQ.emplace(newY, newX, node.time + 1);
		}
	}
}

int main()
{

	cin >> R >> C;
	queue<Path> paths;
	int fireX = 0, fireY = 0;
	Path StartPath{};
	int minTime = 1000 * 1000 * 1000;
	//입력
	for (int i = 0; i < R; ++i)
	{
		for (int j = 0; j < C; ++j)
		{
			char c{};
			cin >> c;
			if ('J' == c)
			{
				StartPath.pos.second = j;
				StartPath.pos.first = i;
				StartPath.time = 1;
				chached[i][j] = 1;
				fireMap[i][j] = MAXVALUE;
			}
			else if (Fire == c)
			{
				FireQ.emplace(i, j, 1);
				fireMap[i][j] = 1;
			}
			else if ('#' == c)
			{
				chached[i][j] = -1;
				fireMap[i][j] = -1;
			}
			else
			{
				chached[i][j] = MAXVALUE;
				fireMap[i][j] = MAXVALUE;
			}
		}
	}

	paths.emplace(StartPath);

	//불붙이기
	FireAction(1);

	while (false == paths.empty())
	{
		auto curPath = paths.front();
		paths.pop();
		if (isEnd(curPath.pos.second, curPath.pos.first))
		{
			minTime = min(minTime, curPath.time);
		}

		if (curPath.time >= minTime)
			continue;

		for (int i = 0; i < 4; ++i)
		{
			int newY = curPath.pos.first + dirY[i];
			int newX = curPath.pos.second + dirX[i];
			if (true == CheckPossiblePath(newX, newY, curPath.time + 1))
			{
				paths.emplace(newY, newX, curPath.time + 1);
				chached[newY][newX] = curPath.time + 1;
			}
		}

	}


	if (minTime == 1000 * 1000 * 1000)
	{
		cout << "IMPOSSIBLE";
	}
	else
	{
		cout << minTime << endl;
	}
}
