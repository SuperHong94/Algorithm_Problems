#include <iostream>
#include <stack>
#include <vector>
using namespace std;




int n;
long long GetLargestArea(const vector<int>& heights, int left, int right)
{

	if (left == right)
	{
		return heights[left];
	}
	int mid = (left + right) / 2;

	auto result = std::max(GetLargestArea(heights, left, mid), GetLargestArea(heights, mid + 1, right));

	//mid는 right보다 작다. 왜냐하면 left<right이기 때문이다. 같을려면 (left + right)/2 == right를 성립해야한다.
	int l = mid, r = mid + 1;

	int minHeight = std::min(heights[l], heights[r]);
	result = std::max(result, minHeight * 2LL);
	while (l > left || r <  right)
	{
		//heights[l - 1] < heights[r + 1] 이거는 최소 높이를 가능한 높은값으로 사용하려는 것이다.(그리드 알고리즘)
		if (r != right && (l == left || heights[l - 1] < heights[r + 1]))
		{
			minHeight = std::min(minHeight, heights[++r]);
		}
		else
		{
			minHeight = std::min(minHeight, heights[--l]);
		}

		result = std::max(result, 1LL * minHeight * (r - l + 1));

	}

	return result;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	while (true) {

		cin >> n;
		if (n == 0) {
			break;
		}

		vector<int> heights(n);
		for (int i = 0; i < n; ++i) {
			cin >> heights[i];
		}

		cout << GetLargestArea(heights, 0, n - 1) << endl;
	}

	return 0;
}
